name: CI

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  pull_request:
    branches:
      - main

jobs:

  lint-build:
    name: Test Linting
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dev dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U black flake8 flake8-black pep8-naming
    - name: Flake8
      run: |
          flake8 .

  test-codegen-build:
    name: Test Codegen
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U pytest numpy black cffi
    - name: Test codegen
      run: |
          pytest -v codegen

  test-minimal-import-build:
    name: Test Imports
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install requests
          python download-wgpu-native.py
          pip uninstall -q -y requests
          pip install -e .
    - name: Test imports
      env:
        WGPU_FORCE_OFFSCREEN: true
      run: |
          python -c "print('wgpu'); import wgpu; print(wgpu)"
          python -c "print('wgpu.backends.rs'); import wgpu.backends.rs"
          python -c "print('wgpu.gui.offscreen'); import wgpu.gui.offscreen"
          python -c "print('wgpu.utils'); import wgpu.utils"
          python -c "print('wgpu.utils.shadertoy'); import wgpu.utils.shadertoy"

  docs-build:
    name: Test Docs
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
    - name: Install dev dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U -r dev-requirements.txt
    - name: Build docs
      run: |
          cd docs
          make html SPHINXOPTS="-W --keep-going"

  test-examples-build:
    name: Test Examples
    timeout-minutes: 10
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install llvmpipe and lavapipe for offscreen canvas
      run: |
        sudo apt-get update -y -qq
        sudo apt install -y libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers
    - name: Install dev dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U -r dev-requirements.txt
          python download-wgpu-native.py
          pip install -e .
    - name: Test examples
      env:
        EXPECT_LAVAPIPE: true
      run: |
          pytest -v examples

  test-pyinstaller-build:
    name: Test PyInstaller
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    - name: Install dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U requests numpy pytest
          python download-wgpu-native.py
          pip install -e .
          pip install psutil pyinstaller>=4.9
    - name: Test PyInstaller
      run: |
          pyinstaller --version
          pytest -v wgpu/__pyinstaller

  test-builds:
    name: ${{ matrix.name }}
    timeout-minutes: 5
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: Test Linux py37
            os: ubuntu-latest
            pyversion: '3.7'
          - name: Test Linux py38
            os: ubuntu-latest
            pyversion: '3.8'
          - name: Test Linux py39
            os: ubuntu-latest
            pyversion: '3.9'
          - name: Test Linux py310
            os: ubuntu-latest
            pyversion: '3.10'
          - name: Test Linux py311
            os: ubuntu-latest
            pyversion: '3.11'
          # Pypy3 fails on installing a 3d party dependency
          #- name: Test Linux pypy3
          #  os: ubuntu-latest
          #  pyversion: 'pypy3'
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python ${{ matrix.pyversion }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.pyversion }}
    - name: Install llvmpipe and lavapipe for offscreen canvas
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update -y -qq
        sudo apt install -y libegl1-mesa libgl1-mesa-dri libxcb-xfixes0-dev mesa-vulkan-drivers
    - name: Install dev dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U -r dev-requirements.txt
          python download-wgpu-native.py
          pip install -e .
    - name: Unit tests
      run: |
          pytest -v tests
    - name: Memory tests
      run: |
          pytest -v tests_mem

  # The release builds are done for the platforms that we want to build wheels for.
  # We build wheels, test them, and then upload the wheel as an artifact.
  release-builds:
    name: Build wheels on ${{ matrix.os }}
    timeout-minutes: 10
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dev dependencies
      run: |
          python -m pip install --upgrade pip wheel setuptools twine
    - name: Build wheels
      uses: pypa/cibuildwheel@v2.16.2
      env:
          CIBW_MANYLINUX_X86_64_IMAGE: quay.io/pypa/manylinux_2_28_x86_64
          CIBW_ARCHS_LINUX: x86_64
          CIBW_SKIP: cp39-musllinux_x86_64
      with:
        output-dir: dist
    - name: Twine check
      run: |
          twine check dist/*
    - name: Upload distributions
      uses: actions/upload-artifact@v2
      with:
        path: dist
        name: dist

  sdist-build:
    name: Build sdist
    timeout-minutes: 5
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Install dev dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U -r dev-requirements.txt
    - name: Create source distribution
      run: |
          python setup.py sdist
    - name: Test sdist
      shell: bash
      run: |
          rm -rf ./wgpu
          pushd $HOME
          pip install $GITHUB_WORKSPACE/dist/*.tar.gz
          popd
          # don't run tests, we just want to know if the sdist can be installed
          pip uninstall -y wgpu
          git reset --hard HEAD
    - name: Twine check
      run: |
          twine check dist/*
    - name: Upload distributions
      uses: actions/upload-artifact@v2
      with:
        path: dist
        name: dist

  publish:
    name: Publish to Github and Pypi
    runs-on: ubuntu-latest
    needs: [test-builds, release-builds, sdist-build]
    if: success() && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v3
    - name: Set up Python 3.9
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    - name: Download assets
      uses: actions/download-artifact@v1.0.0
      with:
        name: dist
    - name: Get version from git ref
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Create GH release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
            Autogenerated binary wheels that include wgpu-native.
            See [the changelog](https://github.com/pygfx/wgpu-py/blob/main/CHANGELOG.md) for details.
        draft: false
        prerelease: false
    - name: Upload release assets
      # Move back to official action after fix https://github.com/actions/upload-release-asset/issues/4
      uses: AButler/upload-release-assets@v2.0
      with:
        release-tag: ${{ steps.get_version.outputs.VERSION }}
        files: 'dist/*.tar.gz;dist/*.whl'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_PASSWORD }}
