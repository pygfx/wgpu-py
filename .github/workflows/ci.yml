name: CI

on:
  push:
    branches:
      - master
    tags:
      - 'v*'
  pull_request:
    branches:
      - master

jobs:

  # Test builds test different Python versions. Also linting/docs/pyinstaller etc.
  test-build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Test lint & docs
            os: ubuntu-latest
            pyversion: '3.8'
            LINT: 1
            DOCS: 1
            SKIPTEST: 1
          - name: Test Linux py36
            os: ubuntu-latest
            pyversion: '3.6'
          - name: Test Linux py37
            os: ubuntu-latest
            pyversion: '3.7'
          - name: Test Linux py38
            os: ubuntu-latest
            pyversion: '3.8'
          # Pypy3 fails on installing a 3d party dependency
          #- name: Test Linux pypy3
          #  os: ubuntu-latest
          #  pyversion: 'pypy3'
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.pyversion }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.pyversion }}
    - name: Install dev dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U -r dev-requirements.txt
    - name: Lint
      if: matrix.LINT == 1
      run: |
          black --check .
          flake8 .
    - name: Build docs
      if: matrix.DOCS == 1
      run: |
          pushd docs
          make html
          popd
    - name: Install in development mode
      if: matrix.SKIPTEST != 1
      run: |
          python download-wgpu-native.py
          python setup.py develop
    - name: Test on repo
      if: matrix.SKIPTEST != 1
      run: |
          pytest -v tests
    - name: Test PyInstaller
      if: matrix.SKIPTEST != 1 && (matrix.pyversion == '3.6' || matrix.pyversion == '3.7')
      run: |
          pip install psutil
          pip install https://github.com/pyinstaller/pyinstaller/archive/develop.zip
          pytest -v wgpu/__pyinstaller

  # The release builds are done for the platforms that we want to build wheels for.
  # We build wheels, test them, and then upload the wheel as an artifact.
  release-build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - name: Linux-64
            os: ubuntu-latest
            SDIST: 1
          - name: MacOS-64
            os: macos-latest
            pyversion: '3.8'
          - name: Windows-64
            os: windows-latest
            pyversion: '3.6'
          - name: Windows-32
            os: windows-latest
            PY_ARCH: x86
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
        architecture: ${{ matrix.PY_ARCH }}
    - name: Install dev dependencies
      run: |
          python -m pip install --upgrade pip
          pip install -U -r dev-requirements.txt
    - name: Create source distribution
      if: matrix.SDIST == 1
      run: |
          python setup.py sdist
    - name: Build wheel
      run: |
          python download-wgpu-native.py
          python setup.py bdist_wheel
    - name: Manylinux1 tag
      if: startsWith(matrix.os, 'ubuntu')
      run: |
          sudo apt-get update
          sudo apt-get install -y patchelf
          auditwheel repair dist/*.whl
          rm dist/*.whl
          cp wheelhouse/*.whl dist/.
    - name: Test wheel
      shell: bash
      run: |
          python setup.py develop --uninstall
          python setup.py clean --all
          rm -rf ./wgpu
          pushd $HOME
          pip install $(echo "$GITHUB_WORKSPACE" | sed -e 's/\\/\//g')/dist/*.whl
          popd
          pytest -v tests
          pip uninstall -y wgpu
          git reset --hard HEAD
    - name: Test sdist
      if: matrix.SDIST == 1
      shell: bash
      run: |
          rm -rf ./wgpu
          pushd $HOME
          pip install $GITHUB_WORKSPACE/dist/*.tar.gz
          popd
          # don't run tests, we just want to know if the sdist can be installed
          pip uninstall -y wgpu
          git reset --hard HEAD
    - name: Twine check
      run: |
          twine check dist/*
    - name: Upload distributions
      uses: actions/upload-artifact@v2
      with:
        path: dist
        name: dist

  docker-build:
    name: Linux-32
    runs-on: ubuntu-16.04
    steps:
    - uses: actions/checkout@v2
    - name: Create and start & prepare container
      env:
        dockerImage: i386/python:3.6-slim-buster
      run: |
        CID=$(docker create -t -w /tmp/wrk -v $PWD:/tmp/src:ro $dockerImage sleep infinity)
        echo "::set-env name=CID::$CID"
        docker start $CID
        docker exec -i $CID bash -c "\
          cp -r /tmp/src/. . && \
          apt-get update && \
          apt-get install -y build-essential git libssl-dev zip"
    - name: Install development requirements
      run: |
        docker exec -i $CID bash -c "\
          python -m pip install -U pip && \
          pip install -U -r dev-requirements.txt"
    - name: Build wheel
      run: |
        docker exec -i $CID bash -c "\
          python download-wgpu-native.py && \
          python setup.py bdist_wheel"
    - name: Manylinux1 tag
      run: |
        docker exec -i $CID bash -c "\
          apt-get install -y patchelf && \
          auditwheel repair dist/*.whl && \
          rm dist/*.whl && \
          cp wheelhouse/*.whl dist/."
        mkdir -p dist
        docker cp $CID:/tmp/wrk/dist/. dist/.
    - name: Test wheel
      run: |
        docker exec -i $CID bash -c "\
          python setup.py develop --uninstall && \
          python setup.py clean --all && \
          rm -rf ./wgpu && \
          mkdir -p /tmp/test && \
          pushd /tmp/test && \
          pip install /tmp/wrk/dist/*.whl && \
          popd && \
          pytest -v tests && \
          pip uninstall -y wgpu && \
          git reset --hard HEAD"
    - name: Twine check
      run: |
        docker exec -i $CID bash -c "\
          twine check dist/*"
    - name: Upload distributions
      uses: actions/upload-artifact@v2
      with:
        path: dist
        name: dist
    - name: Post-job - stop and remove container
      run: |
        docker stop $CID
        docker rm $CID

  publish:
    name: Publish release to Github and Pypi
    runs-on: ubuntu-latest
    needs: [test-build, release-build, docker-build]
    if: success() && startsWith(github.ref, 'refs/tags/v')
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.6
      uses: actions/setup-python@v2
      with:
        python-version: '3.6'
    - name: Download assets
      uses: actions/download-artifact@v1.0.0
      with:
        name: dist
    - name: Get version from git ref
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF/refs\/tags\//}
    - name: Create GH release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        release_name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
            Autogenerated binary wheels that include wgpu-native.
        draft: false
        prerelease: false
    - name: Upload release assets
      # Move back to official action after fix https://github.com/actions/upload-release-asset/issues/4
      uses: AButler/upload-release-assets@v2.0
      with:
        release-tag: ${{ steps.get_version.outputs.VERSION }}
        files: 'dist/*.tar.gz;dist/*.whl'
        repo-token: ${{ secrets.GITHUB_TOKEN }}
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_PASSWORD }}
