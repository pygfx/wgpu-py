trigger:
  branches:
    include:
    - master
  tags:
    include:
    - v*

variables:
  NAME: wgpu
  PY_ARCH: x64

jobs:
- job: host_build
  strategy:
    matrix:
      Linux:
        vmImage: ubuntu-16.04
        SDIST: 1
        LINT: 1
      MacOS:
        vmImage: macOS-10.14
        MACOSX_DEPLOYMENT_TARGET: '10.13'
      Windows:
        vmImage: vs2017-win2016
      Windows-32:
        vmImage: vs2017-win2016
        PY_ARCH: x86
  pool:
    vmImage: $(vmImage)
  steps:
  - task: UsePythonVersion@0
    displayName: Select Python 3.6
    inputs:
      versionSpec: '3.6'
      architecture: $(PY_ARCH)
  - task: Bash@3
    displayName: Install development requirements
    inputs:
      targetType: inline
      script: |
        set -ex
        python -m pip install -U pip
        pip install -U -r dev-requirements.txt
  - task: Bash@3
    displayName: Create source distribution
    condition: and(succeeded(), eq(variables['SDIST'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        python setup.py sdist
  - task: Bash@3
    displayName: Lint (black)
    condition: and(succeeded(), eq(variables['LINT'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        black --check .
  - task: Bash@3
    displayName: Lint (flake8)
    condition: and(succeeded(), eq(variables['LINT'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        flake8
  - task: Bash@3
    displayName: Restore WGPU native binary
    inputs:
      targetType: inline
      script: |
        set -ex
        python download-wgpu-native.py
  - task: Bash@3
    displayName: Build wheel and install in development mode
    inputs:
      targetType: inline
      script: |
        set -ex
        python setup.py develop
        python setup.py bdist_wheel
  - task: Bash@3
    displayName: Test
    inputs:
      targetType: inline
      script: |
        set -ex
        pytest --junit-xml=results.xml || true

        # Fail the task if results.xml was not created
        if [[ ! -f results.xml ]]
        then
          echo "##vso[task.logissue type=error]No test results were found"
          exit 1
        fi
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: results.xml
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: Test $(vmImage)
  - task: Bash@3
    displayName: Manylinux1 tag
    condition: and(succeeded(), eq(variables['Agent.OS'], 'Linux'))
    inputs:
      targetType: inline
      script: |
        set -ex
        sudo apt-get update
        sudo apt-get install -y patchelf
        auditwheel repair dist/*.whl
        rm dist/*.whl
        cp wheelhouse/*.whl dist/.
  - task: Bash@3
    displayName: Test wheel
    inputs:
      targetType: inline
      script: |
        set -ex
        python setup.py develop --uninstall
        python setup.py clean --all
        rm -rf ./wgpu
        pushd $AGENT_TEMPDIRECTORY
        pip install $(echo "$(Build.SourcesDirectory)" | sed -e 's/\\/\//g')/dist/*.whl
        popd
        pytest --junit-xml=results-wheel.xml || true
        pip uninstall -y wgpu
        git reset --hard HEAD

        # Fail the task if results-wheel.xml was not created
        if [[ ! -f results-wheel.xml ]]
        then
          echo "##vso[task.logissue type=error]No test results were found"
          exit 1
        fi
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: results-wheel.xml
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: Test $(vmImage) (wheel)
  - task: Bash@3
    displayName: Test sdist
    condition: and(succeeded(), eq(variables['SDIST'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        rm -rf ./wgpu
        pushd $AGENT_TEMPDIRECTORY
        pip install $(echo "$(Build.SourcesDirectory)" | sed -e 's/\\/\//g')/dist/*.tar.gz
        popd
        # don't run tests, we just want to know if the sdist can be installed
        pip uninstall -y wgpu
        git reset --hard HEAD
  - task: Bash@3
    displayName: Twine check
    inputs:
      targetType: inline
      script: |
        set -ex
        twine check dist/*
  - task: PublishBuildArtifacts@1
    displayName: Publish distributions
    inputs:
      pathtoPublish: dist
      artifactName: dist

- job: docker_build
  strategy:
    matrix:
      Linux-32:
        vmImage: ubuntu-16.04
        dockerImage: i386/python:3.6-slim-buster
  pool:
    vmImage: $(vmImage)
  steps:
  - task: Bash@3
    displayName: Create and start & prepare container
    inputs:
      targetType: inline
      script: |
        set -ex
        CID=$(docker create -t -w /tmp/wrk -v $PWD:/tmp/src:ro $(dockerImage) sleep infinity)
        echo "##vso[task.setvariable variable=CID]$CID"
        docker start $CID
        docker exec -i $CID bash -c "\
          cp -r /tmp/src/. . && \
          apt-get update && \
          apt-get install -y build-essential git libssl-dev zip"
  - task: Bash@3
    displayName: Install development requirements and restore WGPU native binary
    inputs:
      targetType: inline
      script: |
        set -ex
        docker exec -i $CID bash -c "\
          python -m pip install -U pip && \
          pip install -U -r dev-requirements.txt && \
          python download-wgpu-native.py"
  - task: Bash@3
    displayName: Build wheel and install in development mode
    inputs:
      targetType: inline
      script: |
        set -ex
        docker exec -i $CID bash -c "\
          python setup.py develop && \
          python setup.py bdist_wheel"
  - task: Bash@3
    displayName: Test
    inputs:
      targetType: inline
      script: |
        set -ex
        docker exec -i $CID bash -c "\
          pytest --junit-xml=results.xml || true"
        docker cp $CID:/tmp/wrk/results.xml .

        # Fail the task if results.xml was not created
        if [[ ! -f results.xml ]]
        then
          echo "##vso[task.logissue type=error]No test results were found"
          exit 1
        fi
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: results.xml
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: Test $(vmImage) (docker)
  - task: Bash@3
    displayName: Manylinux1 tag
    inputs:
      targetType: inline
      script: |
        set -ex
        docker exec -i $CID bash -c "\
          apt-get install -y patchelf && \
          auditwheel repair dist/*.whl && \
          rm dist/*.whl && \
          cp wheelhouse/*.whl dist/."
        mkdir -p dist
        docker cp $CID:/tmp/wrk/dist/. dist/.
  - task: Bash@3
    displayName: Test wheel
    inputs:
      targetType: inline
      script: |
        set -ex
        docker exec -i $CID bash -c "\
          python setup.py develop --uninstall && \
          python setup.py clean --all && \
          rm -rf ./wgpu && \
          mkdir -p /tmp/test && \
          pushd /tmp/test && \
          pip install /tmp/wrk/dist/*.whl && \
          popd && \
          pytest --junit-xml=results-wheel.xml || true && \
          pip uninstall -y wgpu && \
          git reset --hard HEAD"
        docker cp $CID:/tmp/wrk/results-wheel.xml .

        # Fail the task if results-wheel.xml was not created
        if [[ ! -f results-wheel.xml ]]
        then
          echo "##vso[task.logissue type=error]No test results were found"
          exit 1
        fi
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: results-wheel.xml
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: Test $(vmImage) (wheel, docker)
  - task: Bash@3
    displayName: Twine check
    inputs:
      targetType: inline
      script: |
        set -ex
        docker exec -i $CID bash -c "\
          twine check dist/*"
  - task: PublishBuildArtifacts@1
    displayName: Publish distributions
    inputs:
      pathtoPublish: dist
      artifactName: dist        
  - task: Bash@3
    displayName: 'Post-job: Stop and remove container'
    condition: and(always(), ne(variables['CID'], ''))
    inputs:
      targetType: inline
      script: |
        set -ex
        docker stop $CID
        docker rm $CID

- job: release
  dependsOn:
  - host_build
  - docker_build
  condition: and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: Bash@3
    displayName: git tag == git branch
    inputs:
      targetType: inline
      script: |
        set -ex
        IS_TAG_BUILD=$(expr $(git describe --tags) == $(Build.SourceBranchName)) || true
        echo "##vso[task.setvariable variable=IS_TAG_BUILD]$IS_TAG_BUILD"
        if [[ $IS_TAG_BUILD != 1 ]]; then
          echo This build was not triggered by a tag, aborting release
        fi
  - task: UsePythonVersion@0
    displayName: Select Python 3.6
    condition: and(succeeded(), eq(variables['IS_TAG_BUILD'], '1'))
    inputs:
      versionSpec: '3.6'
  - task: DownloadBuildArtifacts@0
    displayName: Download dist
    condition: and(succeeded(), eq(variables['IS_TAG_BUILD'], '1'))
    inputs:
      artifactName: dist
      downloadPath: .
  - task: GithubRelease@1
    displayName: GitHub Release
    condition: and(succeeded(), eq(variables['IS_TAG_BUILD'], '1'))
    inputs:
      gitHubConnection: github.com_almarklein
      repositoryName: 'almarklein/wgpu-py'
      assets: |
        dist/*.whl
        dist/*.tar.gz
      isDraft: true
      addChangeLog: false
      assetUploadMode: replace
  - task: Bash@3
    displayName: Install twine
    condition: and(succeeded(), eq(variables['IS_TAG_BUILD'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        python -m pip install -U pip setuptools
        python -m pip install -U wheel twine
  - task: TwineAuthenticate@1
    displayName: Authenticate with PyPI
    condition: and(succeeded(), eq(variables['IS_TAG_BUILD'], '1'))
    inputs:
      pythonUploadServiceConnection: pypi
  - task: Bash@3
    displayName: Upload dist to PyPI
    condition: and(succeeded(), eq(variables['IS_TAG_BUILD'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        twine upload -r "wgpu" --config-file $(PYPIRC_PATH) --non-interactive dist/*
