trigger:
- master

variables:
  NAME: wgpu

jobs:

- job: Build
  strategy:
    matrix:
      Linux:
        vmImage: ubuntu-16.04
        FULL_BUILD: 1
      MacOS:
        vmImage: macOS-10.14
        MACOSX_DEPLOYMENT_TARGET: '10.13'
      Windows:
        vmImage: vs2017-win2016
  pool:
    vmImage: $(vmImage)
  steps:
  - task: UsePythonVersion@0
    displayName: Select Python 3.6
    inputs:
      versionSpec: '3.6'
  - task: Bash@3
    displayName: Install development requirements
    inputs:
      targetType: inline
      script: |
        set -ex
        python -m pip install -U pip
        pip install -U -r dev-requirements.txt
  - task: Bash@3
    displayName: Create source distribution
    condition: and(succeeded(), eq(variables['FULL_BUILD'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        python setup.py sdist
  - task: Bash@3
    displayName: Lint (black)
    condition: and(succeeded(), eq(variables['FULL_BUILD'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        black --check .
  - task: Bash@3
    displayName: Lint (flake8)
    condition: and(succeeded(), eq(variables['FULL_BUILD'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        flake8
  - task: Bash@3
    displayName: Restore WGPU native binary
    inputs:
      targetType: inline
      script: |
        set -ex
        python download-wgpu-native.py
  - task: Bash@3
    displayName: Build wheel and install in development mode
    inputs:
      targetType: inline
      script: |
        set -ex
        python setup.py develop
        python setup.py bdist_wheel
  - task: Bash@3
    displayName: Test
    inputs:
      targetType: inline
      script: |
        set -ex
        pytest --junit-xml=results.xml || true

        # Fail the task if results.xml was not created
        if [[ ! -f results.xml ]]
        then
          echo "##vso[task.logissue type=error]No test results were found"
          exit 1
        fi
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: results*.xml
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: Test $(vmImage)
  - task: Bash@3
    displayName: Test wheel
    inputs:
      targetType: inline
      script: |
        set -ex
        python setup.py develop --uninstall
        python setup.py clean --all
        rm -rf ./wgpu
        pip install dist/*.whl
        pytest --junit-xml=results-wheel.xml || true

        # Fail the task if results-wheel.xml was not created
        if [[ ! -f results-wheel.xml ]]
        then
          echo "##vso[task.logissue type=error]No test results were found"
          exit 1
        fi
  - task: PublishTestResults@2
    inputs:
      testResultsFiles: results-wheel.xml
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: Test $(vmImage) (wheel)
  - task: Bash@3
    displayName: Test sdist
    condition: and(succeeded(), eq(variables['FULL_BUILD'], '1'))
    inputs:
      targetType: inline
      script: |
        set -ex
        python setup.py develop --uninstall
        python setup.py clean --all
        rm -rf ./wgpu
        pip install dist/*.tar.gz
        pytest --junit-xml=results-sdist.xml || true

        # Fail the task if results-sdist.xml was not created
        if [[ ! -f results-sdist.xml ]]
        then
          echo "##vso[task.logissue type=error]No test results were found"
          exit 1
        fi
  - task: PublishTestResults@2
    condition: and(succeeded(), eq(variables['FULL_BUILD'], '1'))
    inputs:
      testResultsFiles: results-sdist.xml
      mergeTestResults: true
      failTaskOnFailedTests: true
      testRunTitle: Test $(vmImage) (sdist)
  - task: PublishBuildArtifacts@1
    displayName: Publish distributions
    inputs:
      pathtoPublish: dist
      artifactName: dist

- job: Release
  dependsOn: Build
  condition: and(succeeded(), eq(variables['Build.SourceBranchName'], 'master'))
  pool:
    vmImage: ubuntu-16.04
  steps:
  - task: UsePythonVersion@0
    displayName: Select Python 3.6
    inputs:
      versionSpec: '3.6'
  - task: Bash@3
    displayName: Check git tag
    inputs:
      targetType: inline
      script: |
        set -x
        TAGS=$(git describe --tags)
        echo "##vso[task.setvariable variable=TAGS]$TAGS"
  - task: DownloadBuildArtifacts@0
    displayName: Download dist
    condition: and(succeeded(), ne(variables['TAGS'], ''))
    inputs:
      artifactName: dist
      downloadPath: .
  - task: GithubRelease@1
    displayName: GitHub Release
    condition: and(succeeded(), ne(variables['TAGS'], ''))
    inputs:
      gitHubConnection: github.com_almarklein
      repositoryName: 'almarklein/wgpu-py'
      assets: 'dist/*.whl'  # TODO: include sdist
      isDraft: true
      addChangeLog: false
      assetUploadMode: replace
  - task: Bash@3
    displayName: Install twine
    condition: and(succeeded(), ne(variables['TAGS'], ''))
    inputs:
      targetType: inline
      script: |
        set -ex
        python -m pip install -U pip setuptools
        python -m pip install -U wheel twine
  - task: TwineAuthenticate@1
    displayName: Authenticate with PyPI
    condition: and(succeeded(), ne(variables['TAGS'], ''))
    inputs:
      pythonUploadServiceConnection: pypi
  - task: Bash@3
    displayName: Upload dist to PyPI
    condition: and(succeeded(), ne(variables['TAGS'], ''))
    inputs:
      targetType: inline
      script: |
        set -ex
        rm dist/*linux*.whl
        twine upload -r "wgpu" --config-file $(PYPIRC_PATH) --non-interactive dist/*
