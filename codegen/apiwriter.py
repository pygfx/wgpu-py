"""
Writes the parts of the API that are simple: flags, enums, structs.
"""

import re

from codegen.utils import print, format_code, to_snake_case
from codegen.idlparser import get_idl_parser
from codegen.files import file_cache


ref_pattern = re.compile(r"\W((GPU|flags\.|enums\.|structs\.)\w+?)\W", re.MULTILINE)


def resolve_crossrefs(text):
    # Similar code as in docs/conf.py
    text += " "
    i2 = 0
    while True:
        m = ref_pattern.search(text, i2)
        if not m:
            break
        i1, i2 = m.start(1), m.end(1)
        prefix = m.group(2)
        ref_indicator = ":obj:" if prefix.lower() == prefix else ":class:"
        name = m.group(1)
        if name.startswith("structs."):
            link = name.split(".")[1]
        else:
            link = "wgpu." + name
        insertion = f"{ref_indicator}`{name} <{link}>`"
        text = text[:i1] + insertion + text[i2:]
        i2 += len(insertion) - len(name)
    return text.rstrip()


def write_flags():
    # Get preamble
    pylines = []
    for line in file_cache.read("flags.py").splitlines():
        pylines.append(line)
        if "AUTOGENERATED" in line:
            pylines += ["", ""]
            break
    # Prepare
    idl = get_idl_parser()
    n = len(idl.flags)
    # List'm
    pylines.append(f"# There are {n} flags\n")
    pylines.append("__all__ = [")
    for name in sorted(idl.flags.keys()):
        pylines.append(f'    "{name}",')
    pylines.append("]\n\n")
    # The flags definitions
    for name, d in idl.flags.items():
        # Generate Code
        pylines.append(f"{name}Flags = int | str\n\n")
        pylines.append(f"class {name}(Flags):\n")
        for key, val in d.items():
            pylines.append(f"    {key} = {val!r}")  # note: can add docs using "#: "
        pylines.append("\n")
    # Write
    code = format_code("\n".join(pylines))
    file_cache.write("flags.py", code)
    print(f"Wrote {n} flags to flags.py")


def write_enums():
    # Get preamble
    pylines = []
    for line in file_cache.read("enums.py").splitlines():
        pylines.append(line)
        if "AUTOGENERATED" in line:
            pylines += ["", ""]
            break
    # Prepare
    idl = get_idl_parser()
    n = len(idl.enums)
    # List'm
    pylines.append(f"# There are {n} enums\n")
    pylines.append("__all__ = [")
    for name in sorted(idl.enums.keys()):
        pylines.append(f'    "{name}",')
    pylines.append("]\n\n")
    for name, d in idl.enums.items():
        # Generate Code
        quoted_values = [f'"{v}"' for v in d.values()]
        pylines.append(f"{name}Enum = Literal[{', '.join(quoted_values)}] | str\n\n")
        pylines.append(f"class {name}(Enum):\n")
        for key, val in d.items():
            pylines.append(f'    {key} = "{val}"')  # note: can add docs using "#: "
        pylines.append("\n")
    # Write
    code = format_code("\n".join(pylines))
    file_cache.write("enums.py", code)
    print(f"Wrote {n} enums to enums.py")


def write_structs():
    # Get preamble
    pylines = []
    for line in file_cache.read("structs.py").splitlines():
        pylines.append(line)
        if "AUTOGENERATED" in line:
            pylines += ["", ""]
            break
    # Prepare
    idl = get_idl_parser()
    n = len(idl.structs)
    ignore = ["ImageCopyTextureTagged"]
    pylines.append(f"# There are {n} structs\n")
    # List'm
    pylines.append("__all__ = [")
    for name in sorted(idl.structs.keys()):
        if name not in ignore:
            pylines.append(f'    "{name}",')
    pylines.append("]\n\n")
    for name, d in idl.structs.items():
        if name in ignore:
            continue
        pylines.append(f"@dataclass(kw_only=True, repr=False)\nclass {name}(Struct):")
        for field in d.values():
            key = to_snake_case(field.name)
            # Get type to include in code
            raw_type = idl.resolve_type(field.typename).strip("'")
            code_type = raw_type.replace("GPU", "classes.GPU").replace("structs.", "")
            # Get type to include in docs
            docs_type = None
            if "flags." in raw_type or "enums" in raw_type:
                docs_type = raw_type.replace("Flags", "").replace("Enum", "")
                docs_type = resolve_crossrefs(f" {docs_type} ")
            # Get default
            default = field.default
            if default in ["{}", "[]"]:
                default = "None"  # no mutable defaults
                code_type += " | None"
            elif not default and not field.required:
                default = "None"
                if "None" not in code_type:
                    code_type += " | None"
            # Build docs
            doc = ""
            if docs_type:
                doc += f"{docs_type.strip()} "
            if default:
                pylines.append(f"    #: {doc}\n    {key}: {code_type} = {default}")
            else:
                pylines.append(f"    #: {doc}\n    {key}: {code_type}")
        if len(d) == 0:
            pylines.append("    pass")
        pylines.append("\n")
        pylines.append(f"{name}Struct = {name} | dict")

    # Write
    code = format_code("\n".join(pylines))
    file_cache.write("structs.py", code)
    print(f"Wrote {n} structs to structs.py")
