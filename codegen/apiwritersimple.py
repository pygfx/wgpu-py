"""
Writes the parts of the API that are simple: flags, enums, structs.
"""

import os

from codegen.utils import lib_dir, blacken, to_snake_case
from codegen.idlparser import get_idl_parser


flags_preamble = '''
"""
All wgpu flags. Also available in the root wgpu namespace.
"""

# THIS CODE IS AUTOGENERATED - DO NOT EDIT

_use_sphinx_repr = False

class Flags:

    def __init__(self, name, **kwargs):
        self._name = name
        for key, val in kwargs.items():
            setattr(self, key, val)

    def __iter__(self):
        return iter([key for key in dir(self) if not key.startswith("_")])

    def __repr__(self):
        options = ", ".join(self)
        if _use_sphinx_repr:  # no-cover
            return options
        return f"<{self.__class__.__name__} {self._name}: {options}>"

'''.lstrip()


def write_flags():
    idl = get_idl_parser()
    # Generate code
    pylines = [flags_preamble]
    pylines.append(f"# There are {len(idl.flags)} flags\n")
    for name, d in idl.flags.items():
        pylines.append(f'{name} = Flags(\n    "{name}",')
        for key, val in d.items():
            pylines.append(f"    {key}={val!r},")
        pylines.append(")  #:\n")
    # Write
    code = blacken("\n".join(pylines))
    with open(os.path.join(lib_dir, "flags.py"), "wb") as f:
        f.write(code.encode())
    print("Written to flags.py")


enums_preamble = '''
"""
All wgpu enums. Also available in the root wgpu namespace.
"""

# THIS CODE IS AUTOGENERATED - DO NOT EDIT

_use_sphinx_repr = False

class Enum:

    def __init__(self, name, **kwargs):
        self._name = name
        for key, val in kwargs.items():
            setattr(self, key, val)

    def __iter__(self):
        return iter(
            [getattr(self, key) for key in dir(self) if not key.startswith("_")]
        )

    def __repr__(self):
        options = ", ".join(f"'{x}'" for x in self)
        if _use_sphinx_repr:  # no-cover
            return options
        return f"<{self.__class__.__name__} {self._name}: {options}>"

'''.lstrip()


def write_enums():
    idl = get_idl_parser()
    # Generate code
    pylines = [enums_preamble]
    pylines.append(f"# There are {len(idl.enums)} enums\n")
    for name, d in idl.enums.items():
        pylines.append(f'{name} = Enum(\n    "{name}",')
        for key, val in d.items():
            pylines.append(f'    {key}="{val}",')
        pylines.append(")  #:\n")  # That #: is for Sphinx
    # Write
    code = blacken("\n".join(pylines))
    with open(os.path.join(lib_dir, "enums.py"), "wb") as f:
        f.write(code.encode())
    print("Written to enums.py")


structs_preamble = '''
"""
All wgpu structs.
"""

# THIS CODE IS AUTOGENERATED - DO NOT EDIT

_use_sphinx_repr = False


class Struct:
    def __init__(self, name, **kwargs):
        self._name = name
        for key, val in kwargs.items():
            setattr(self, key, val)

    def __iter__(self):
        return iter(
            [key for key in dir(self) if not key.startswith("_")]
        )

    def __repr__(self):
        options = ", ".join(f"'{x}'" for x in self)
        if _use_sphinx_repr:  # no-cover
            return options
        return f"<{self.__class__.__name__} {self._name}: {options}>"

'''.lstrip()


def write_structs():
    idl = get_idl_parser()
    # Generate code
    pylines = [structs_preamble]
    pylines.append(f"# There are {len(idl.structs)} structs\n")
    for name, d in idl.structs.items():
        pylines.append(f'{name} = Struct(\n    "{name}",')
        for field in d.values():
            key = to_snake_case(field.name)
            val = idl.resolve_type(field.typename)
            pylines.append(f"    {key}={val},")
        pylines.append(")  #:\n")  # That #: is for Sphinx

    # Write
    code = blacken("\n".join(pylines))
    with open(os.path.join(lib_dir, "structs.py"), "wb") as f:
        f.write(code.encode())
    print("Written to structs.py")
