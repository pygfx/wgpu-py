"""
Apply codegen to rs backend.
"""

import os

from codegen.utils import lib_dir, blacken
from codegen.hparser import HParser
from codegen.idlparser import IdlParser


mappings_preamble = '''
""" Mappings for the rs backend. """

# THIS CODE IS AUTOGENERATED - DO NOT EDIT

# flake8: noqa
'''.lstrip()


# todo: this is WIP


def write_mappings():

    ip = IdlParser()
    ip.parse()
    hp = HParser()
    hp.parse()

    # Create enummap, which allows the rs backend to resolve enum field names
    # to the corresponding integer value.
    enummap = {}
    for name in ip.enums:
        if name not in hp.enums:
            print(f"Enum {name} missing in wgpu.h")
            continue
        for ikey in ip.enums[name].values():
            hkey = ikey
            hkey = hkey.replace("1d", "D1").replace("2d", "D2").replace("3d", "D3")
            hkey = hkey.replace("-", " ").title().replace(" ", "")
            if hkey in hp.enums[name]:
                enummap[name + "." + ikey] = hp.enums[name][hkey]
            else:
                print(f"Enum field {name}.{ikey} missing in .h")

    # Some structs have fields that are enum values. The rs backend
    # must be able to resolve these too.
    cstructfield2enum = {}
    for structname, struct in hp.structs.items():
        for key, val in struct.items():
            if isinstance(val, str) and val.startswith("WGPU"):
                enumname = val[4:]
                if enumname in ip.enums:
                    cstructfield2enum[f"{structname[4:]}.{key}"] = enumname
                else:
                    pass  # a struct

    # Generate code
    pylines = [mappings_preamble]

    pylines.append(f"# There are {len(enummap)} enum mappings\n")
    pylines.append("enummap = {")
    for key in sorted(enummap.keys()):
        pylines.append(f'    "{key}": {enummap[key]!r},')
    pylines.append("}\n")

    pylines.append(f"# There are {len(cstructfield2enum)} struct-field enum mappings\n")
    pylines.append("cstructfield2enum = {")
    for key in sorted(cstructfield2enum.keys()):
        pylines.append(f'    "{key}": {cstructfield2enum[key]!r},')
    pylines.append("}\n")

    # Write
    code = blacken("\n".join(pylines))  # just in case; code is already black
    with open(os.path.join(lib_dir, "backends", "rs_mappings.py"), "wb") as f:
        f.write(code.encode())
    print("Written to rs_mappings.py")


if __name__ == "__main__":
    write_mappings()
