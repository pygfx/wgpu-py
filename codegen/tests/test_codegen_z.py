"""
Applying the codegen should not introduce changes.
"""

import os
import sys
import time
from difflib import unified_diff

from codegen import main
from codegen.files import file_cache, get_line_endings, lib_dir


def test_line_endings():
    # All LF, but also ok if fraction is CR
    assert get_line_endings("foo\nbar\nspam\neggs\n") == "\n"
    assert get_line_endings("foo\nbar\nspam\reggs\n") == "\n"

    # All CR, but also ok if fraction is LF.
    # I know that CR line endings are an archaic Mac thing, but some dev
    # might just have his git setup in a weird way :)
    assert get_line_endings("foo\rbar\rspam\reggs\r") == "\r"
    assert get_line_endings("foo\rbar\rspam\neggs\r") == "\r"

    # If most are equal,
    assert get_line_endings("foo\r\nbar\r\nspam\r\neggs\r\n") == "\r\n"
    assert get_line_endings("foo\r\nbar\r\nspam\neggs\r\n") == "\r\n"
    assert get_line_endings("foo\r\nbar\r\nspam\reggs\r\n") == "\r\n"


def test_that_code_is_up_to_date():
    """Test that running the codegen updates what we expect, but does not introduce changes."""

    # Obtain mtime of all file that can change
    mtimes = {}
    for fname in file_cache.filenames_to_change:
        filename = os.path.join(lib_dir, fname)
        mtimes[filename] = os.path.getmtime(filename)

    time.sleep(0.2)

    # Reset the file cache
    file_cache.reset()
    assert file_cache.filenames_written == set()

    # Collect original version of the files
    originals = {}
    for fname in file_cache.filenames_to_change:
        originals[fname] = file_cache.read(fname)

    # Perform the codegen
    main()

    # Confirm that all files that are allowed to change, are actually written
    assert file_cache.filenames_written == set(file_cache.filenames_to_change)

    # Double-check that mtimes have not changed - i.e. the real file system is not touched
    all(t == os.path.getmtime(filename) for filename, t in mtimes.items())

    errors = False

    # Check that the files have not actually changed. This is to ensure that:
    # * an update to wgpu-native is actually completed.
    # * the autogenerated code is not manually changed.
    # * The codegen report is correct.
    for fname in file_cache.filenames_to_change:
        content1 = originals[fname]
        content2 = file_cache.read(fname)
        if content1 != content2:
            lines1 = content1.splitlines(keepends=True)
            lines2 = content2.splitlines(keepends=True)
            sys.stdout.writelines(
                unified_diff(lines1, lines2, fromfile=fname, tofile="after")
            )
            errors = True

    assert not errors
    print("Codegen check ok!")


def test_that_codegen_report_has_no_errors():
    filename = os.path.join(lib_dir, "resources", "codegen_report.md")
    with open(filename, "rb") as f:
        text = f.read().decode()

    # The codegen uses a prefix "ERROR:" for unacceptable things.
    # All caps, some function names may contain the name "error".
    assert "ERROR" not in text


if __name__ == "__main__":
    test_line_endings()
    test_that_code_is_up_to_date()
    test_that_codegen_report_has_no_errors()
