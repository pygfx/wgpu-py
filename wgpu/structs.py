"""
These structs are defined in ``wgpu.structs``.

The structs in wgpu-py are represented as Python dictionaries.
The classes below are ``TypedDict``s; they are used for typing, static autocompletion, and docs,
but you can also instantiate them, which creates a regular dict.
"""

# Allow using class names in type annotations, without Ruff triggering F821
from __future__ import annotations

from typing import TypedDict
from ._coreutils import ArrayLike, CanvasLike
from . import _classes as classes
from . import flags
from . import enums


# CODE BELOW THIS POINT IS AUTOGENERATED - DO NOT EDIT


# There are 60 structs

__all__ = [
    "BindGroupDescriptor",
    "BindGroupEntry",
    "BindGroupLayoutDescriptor",
    "BindGroupLayoutEntry",
    "BlendComponent",
    "BlendState",
    "BufferBinding",
    "BufferBindingLayout",
    "BufferDescriptor",
    "CanvasConfiguration",
    "CanvasToneMapping",
    "Color",
    "ColorTargetState",
    "CommandBufferDescriptor",
    "CommandEncoderDescriptor",
    "ComputePassDescriptor",
    "ComputePassTimestampWrites",
    "ComputePipelineDescriptor",
    "CopyExternalImageDestInfo",
    "CopyExternalImageSourceInfo",
    "DepthStencilState",
    "DeviceDescriptor",
    "Extent3D",
    "ExternalTextureBindingLayout",
    "ExternalTextureDescriptor",
    "FragmentState",
    "MultisampleState",
    "Origin2D",
    "Origin3D",
    "PipelineErrorInit",
    "PipelineLayoutDescriptor",
    "PrimitiveState",
    "ProgrammableStage",
    "QuerySetDescriptor",
    "QueueDescriptor",
    "RenderBundleDescriptor",
    "RenderBundleEncoderDescriptor",
    "RenderPassColorAttachment",
    "RenderPassDepthStencilAttachment",
    "RenderPassDescriptor",
    "RenderPassLayout",
    "RenderPassTimestampWrites",
    "RenderPipelineDescriptor",
    "RequestAdapterOptions",
    "SamplerBindingLayout",
    "SamplerDescriptor",
    "ShaderModuleCompilationHint",
    "ShaderModuleDescriptor",
    "StencilFaceState",
    "StorageTextureBindingLayout",
    "TexelCopyBufferInfo",
    "TexelCopyBufferLayout",
    "TexelCopyTextureInfo",
    "TextureBindingLayout",
    "TextureDescriptor",
    "TextureViewDescriptor",
    "UncapturedErrorEventInit",
    "VertexAttribute",
    "VertexBufferLayout",
    "VertexState",
]


class RequestAdapterOptions(TypedDict, total=False):
    feature_level: str  #: (default "core")
    power_preference: (
        enums.PowerPreferenceEnum
    )  #: :obj:`enums.PowerPreference <wgpu.enums.PowerPreference>` (optional)
    force_fallback_adapter: bool  #: (default false)
    xr_compatible: bool  #: (default false)


class DeviceDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    required_features: list[
        enums.FeatureNameEnum
    ]  #: list[:obj:`enums.FeatureName <wgpu.enums.FeatureName>`] (default [])
    required_limits: dict[str, None | int]  #: (default {})
    default_queue: QueueDescriptor  #: (default {})


class BufferDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    size: int  #: (required)
    usage: (
        flags.BufferUsageFlags
    )  #: :obj:`flags.BufferUsage <wgpu.flags.BufferUsage>` (required)
    mapped_at_creation: bool  #: (default false)


class TextureDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    size: tuple[int, int, int] | Extent3D  #: (required)
    mip_level_count: int  #: (default 1)
    sample_count: int  #: (default 1)
    dimension: (
        enums.TextureDimensionEnum
    )  #: :obj:`enums.TextureDimension <wgpu.enums.TextureDimension>` (default "2d")
    format: (
        enums.TextureFormatEnum
    )  #: :obj:`enums.TextureFormat <wgpu.enums.TextureFormat>` (required)
    usage: (
        flags.TextureUsageFlags
    )  #: :obj:`flags.TextureUsage <wgpu.flags.TextureUsage>` (required)
    view_formats: list[
        enums.TextureFormatEnum
    ]  #: list[:obj:`enums.TextureFormat <wgpu.enums.TextureFormat>`] (default [])


class TextureViewDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    format: (
        enums.TextureFormatEnum
    )  #: :obj:`enums.TextureFormat <wgpu.enums.TextureFormat>` (optional)
    dimension: (
        enums.TextureViewDimensionEnum
    )  #: :obj:`enums.TextureViewDimension <wgpu.enums.TextureViewDimension>` (optional)
    usage: (
        flags.TextureUsageFlags
    )  #: :obj:`flags.TextureUsage <wgpu.flags.TextureUsage>` (default 0)
    aspect: (
        enums.TextureAspectEnum
    )  #: :obj:`enums.TextureAspect <wgpu.enums.TextureAspect>` (default "all")
    base_mip_level: int  #: (default 0)
    mip_level_count: int  #: (optional)
    base_array_layer: int  #: (default 0)
    array_layer_count: int  #: (optional)


class ExternalTextureDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    source: ArrayLike | object  #: (required)
    color_space: str  #: (default "srgb")


class SamplerDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    address_mode_u: (
        enums.AddressModeEnum
    )  #: :obj:`enums.AddressMode <wgpu.enums.AddressMode>` (default "clamp-to-edge")
    address_mode_v: (
        enums.AddressModeEnum
    )  #: :obj:`enums.AddressMode <wgpu.enums.AddressMode>` (default "clamp-to-edge")
    address_mode_w: (
        enums.AddressModeEnum
    )  #: :obj:`enums.AddressMode <wgpu.enums.AddressMode>` (default "clamp-to-edge")
    mag_filter: (
        enums.FilterModeEnum
    )  #: :obj:`enums.FilterMode <wgpu.enums.FilterMode>` (default "nearest")
    min_filter: (
        enums.FilterModeEnum
    )  #: :obj:`enums.FilterMode <wgpu.enums.FilterMode>` (default "nearest")
    mipmap_filter: enums.MipmapFilterModeEnum  #: :obj:`enums.MipmapFilterMode <wgpu.enums.MipmapFilterMode>` (default "nearest")
    lod_min_clamp: float  #: (default 0)
    lod_max_clamp: float  #: (default 32)
    compare: (
        enums.CompareFunctionEnum
    )  #: :obj:`enums.CompareFunction <wgpu.enums.CompareFunction>` (optional)
    max_anisotropy: int  #: (default 1)


class BindGroupLayoutDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    entries: list[BindGroupLayoutEntry]  #: (required)


class BindGroupLayoutEntry(TypedDict, total=False):
    binding: int  #: (required)
    visibility: (
        flags.ShaderStageFlags
    )  #: :obj:`flags.ShaderStage <wgpu.flags.ShaderStage>` (required)
    buffer: BufferBindingLayout  #: (optional)
    sampler: SamplerBindingLayout  #: (optional)
    texture: TextureBindingLayout  #: (optional)
    storage_texture: StorageTextureBindingLayout  #: (optional)
    external_texture: ExternalTextureBindingLayout  #: (optional)


class BufferBindingLayout(TypedDict, total=False):
    type: enums.BufferBindingTypeEnum  #: :obj:`enums.BufferBindingType <wgpu.enums.BufferBindingType>` (default "uniform")
    has_dynamic_offset: bool  #: (default false)
    min_binding_size: int  #: (default 0)


class SamplerBindingLayout(TypedDict, total=False):
    type: enums.SamplerBindingTypeEnum  #: :obj:`enums.SamplerBindingType <wgpu.enums.SamplerBindingType>` (default "filtering")


class TextureBindingLayout(TypedDict, total=False):
    sample_type: enums.TextureSampleTypeEnum  #: :obj:`enums.TextureSampleType <wgpu.enums.TextureSampleType>` (default "float")
    view_dimension: enums.TextureViewDimensionEnum  #: :obj:`enums.TextureViewDimension <wgpu.enums.TextureViewDimension>` (default "2d")
    multisampled: bool  #: (default false)


class StorageTextureBindingLayout(TypedDict, total=False):
    access: enums.StorageTextureAccessEnum  #: :obj:`enums.StorageTextureAccess <wgpu.enums.StorageTextureAccess>` (default "write-only")
    format: (
        enums.TextureFormatEnum
    )  #: :obj:`enums.TextureFormat <wgpu.enums.TextureFormat>` (required)
    view_dimension: enums.TextureViewDimensionEnum  #: :obj:`enums.TextureViewDimension <wgpu.enums.TextureViewDimension>` (default "2d")


class ExternalTextureBindingLayout(TypedDict, total=False):
    pass


class BindGroupDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    layout: classes.GPUBindGroupLayout  #: (required)
    entries: list[BindGroupEntry]  #: (required)


class BindGroupEntry(TypedDict, total=False):
    binding: int  #: (required)
    resource: (
        classes.GPUBuffer
        | classes.GPUSampler
        | classes.GPUTexture
        | classes.GPUTextureView
        | object
        | BufferBinding
    )  #: (required)


class BufferBinding(TypedDict, total=False):
    buffer: classes.GPUBuffer  #: (required)
    offset: int  #: (default 0)
    size: int  #: (optional)


class PipelineLayoutDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    bind_group_layouts: list[classes.GPUBindGroupLayout]  #: (required)


class ShaderModuleDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    code: str  #: (required)
    compilation_hints: list[ShaderModuleCompilationHint]  #: (default [])


class ShaderModuleCompilationHint(TypedDict, total=False):
    entry_point: str  #: (required)
    layout: (
        classes.GPUPipelineLayout | enums.AutoLayoutModeEnum
    )  #: classes.:class:`GPUPipelineLayout <wgpu.GPUPipelineLayout>` | :obj:`enums.AutoLayoutMode <wgpu.enums.AutoLayoutMode>` (optional)


class PipelineErrorInit(TypedDict, total=False):
    reason: (
        enums.PipelineErrorReasonEnum
    )  #: :obj:`enums.PipelineErrorReason <wgpu.enums.PipelineErrorReason>` (required)


class ProgrammableStage(TypedDict, total=False):
    module: classes.GPUShaderModule  #: (required)
    entry_point: str  #: (optional)
    constants: dict[str, float]  #: (default {})


class ComputePipelineDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    layout: (
        classes.GPUPipelineLayout | enums.AutoLayoutModeEnum
    )  #: classes.:class:`GPUPipelineLayout <wgpu.GPUPipelineLayout>` | :obj:`enums.AutoLayoutMode <wgpu.enums.AutoLayoutMode>` (required)
    compute: ProgrammableStage  #: (required)


class RenderPipelineDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    layout: (
        classes.GPUPipelineLayout | enums.AutoLayoutModeEnum
    )  #: classes.:class:`GPUPipelineLayout <wgpu.GPUPipelineLayout>` | :obj:`enums.AutoLayoutMode <wgpu.enums.AutoLayoutMode>` (required)
    vertex: VertexState  #: (required)
    primitive: PrimitiveState  #: (default {})
    depth_stencil: DepthStencilState  #: (optional)
    multisample: MultisampleState  #: (default {})
    fragment: FragmentState  #: (optional)


class PrimitiveState(TypedDict, total=False):
    topology: enums.PrimitiveTopologyEnum  #: :obj:`enums.PrimitiveTopology <wgpu.enums.PrimitiveTopology>` (default "triangle-list")
    strip_index_format: (
        enums.IndexFormatEnum
    )  #: :obj:`enums.IndexFormat <wgpu.enums.IndexFormat>` (optional)
    front_face: (
        enums.FrontFaceEnum
    )  #: :obj:`enums.FrontFace <wgpu.enums.FrontFace>` (default "ccw")
    cull_mode: (
        enums.CullModeEnum
    )  #: :obj:`enums.CullMode <wgpu.enums.CullMode>` (default "none")
    unclipped_depth: bool  #: (default false)


class MultisampleState(TypedDict, total=False):
    count: int  #: (default 1)
    mask: int  #: (default 0xFFFFFFFF)
    alpha_to_coverage_enabled: bool  #: (default false)


class FragmentState(TypedDict, total=False):
    module: classes.GPUShaderModule  #: (required)
    entry_point: str  #: (optional)
    constants: dict[str, float]  #: (default {})
    targets: list[ColorTargetState]  #: (required)


class ColorTargetState(TypedDict, total=False):
    format: (
        enums.TextureFormatEnum
    )  #: :obj:`enums.TextureFormat <wgpu.enums.TextureFormat>` (required)
    blend: BlendState  #: (optional)
    write_mask: (
        flags.ColorWriteFlags
    )  #: :obj:`flags.ColorWrite <wgpu.flags.ColorWrite>` (default 0xF)


class BlendState(TypedDict, total=False):
    color: BlendComponent  #: (required)
    alpha: BlendComponent  #: (required)


class BlendComponent(TypedDict, total=False):
    operation: (
        enums.BlendOperationEnum
    )  #: :obj:`enums.BlendOperation <wgpu.enums.BlendOperation>` (default "add")
    src_factor: (
        enums.BlendFactorEnum
    )  #: :obj:`enums.BlendFactor <wgpu.enums.BlendFactor>` (default "one")
    dst_factor: (
        enums.BlendFactorEnum
    )  #: :obj:`enums.BlendFactor <wgpu.enums.BlendFactor>` (default "zero")


class DepthStencilState(TypedDict, total=False):
    format: (
        enums.TextureFormatEnum
    )  #: :obj:`enums.TextureFormat <wgpu.enums.TextureFormat>` (required)
    depth_write_enabled: bool  #: (optional)
    depth_compare: (
        enums.CompareFunctionEnum
    )  #: :obj:`enums.CompareFunction <wgpu.enums.CompareFunction>` (optional)
    stencil_front: StencilFaceState  #: (default {})
    stencil_back: StencilFaceState  #: (default {})
    stencil_read_mask: int  #: (default 0xFFFFFFFF)
    stencil_write_mask: int  #: (default 0xFFFFFFFF)
    depth_bias: int  #: (default 0)
    depth_bias_slope_scale: float  #: (default 0)
    depth_bias_clamp: float  #: (default 0)


class StencilFaceState(TypedDict, total=False):
    compare: (
        enums.CompareFunctionEnum
    )  #: :obj:`enums.CompareFunction <wgpu.enums.CompareFunction>` (default "always")
    fail_op: (
        enums.StencilOperationEnum
    )  #: :obj:`enums.StencilOperation <wgpu.enums.StencilOperation>` (default "keep")
    depth_fail_op: (
        enums.StencilOperationEnum
    )  #: :obj:`enums.StencilOperation <wgpu.enums.StencilOperation>` (default "keep")
    pass_op: (
        enums.StencilOperationEnum
    )  #: :obj:`enums.StencilOperation <wgpu.enums.StencilOperation>` (default "keep")


class VertexState(TypedDict, total=False):
    module: classes.GPUShaderModule  #: (required)
    entry_point: str  #: (optional)
    constants: dict[str, float]  #: (default {})
    buffers: list[VertexBufferLayout]  #: (default [])


class VertexBufferLayout(TypedDict, total=False):
    array_stride: int  #: (required)
    step_mode: (
        enums.VertexStepModeEnum
    )  #: :obj:`enums.VertexStepMode <wgpu.enums.VertexStepMode>` (default "vertex")
    attributes: list[VertexAttribute]  #: (required)


class VertexAttribute(TypedDict, total=False):
    format: (
        enums.VertexFormatEnum
    )  #: :obj:`enums.VertexFormat <wgpu.enums.VertexFormat>` (required)
    offset: int  #: (required)
    shader_location: int  #: (required)


class TexelCopyBufferLayout(TypedDict, total=False):
    offset: int  #: (default 0)
    bytes_per_row: int  #: (optional)
    rows_per_image: int  #: (optional)


class TexelCopyBufferInfo(TypedDict, total=False):
    offset: int  #: (default 0)
    bytes_per_row: int  #: (optional)
    rows_per_image: int  #: (optional)
    buffer: classes.GPUBuffer  #: (required)


class TexelCopyTextureInfo(TypedDict, total=False):
    texture: classes.GPUTexture  #: (required)
    mip_level: int  #: (default 0)
    origin: tuple[int, int, int] | Origin3D  #: (default {})
    aspect: (
        enums.TextureAspectEnum
    )  #: :obj:`enums.TextureAspect <wgpu.enums.TextureAspect>` (default "all")


class CopyExternalImageDestInfo(TypedDict, total=False):
    texture: classes.GPUTexture  #: (required)
    mip_level: int  #: (default 0)
    origin: tuple[int, int, int] | Origin3D  #: (default {})
    aspect: (
        enums.TextureAspectEnum
    )  #: :obj:`enums.TextureAspect <wgpu.enums.TextureAspect>` (default "all")
    color_space: str  #: (default "srgb")
    premultiplied_alpha: bool  #: (default false)


class CopyExternalImageSourceInfo(TypedDict, total=False):
    source: ArrayLike | CanvasLike | object  #: (required)
    origin: tuple[int, int] | Origin2D  #: (default {})
    flip_y: bool  #: (default false)


class CommandBufferDescriptor(TypedDict, total=False):
    label: str  #: (default "")


class CommandEncoderDescriptor(TypedDict, total=False):
    label: str  #: (default "")


class ComputePassTimestampWrites(TypedDict, total=False):
    query_set: classes.GPUQuerySet  #: (required)
    beginning_of_pass_write_index: int  #: (optional)
    end_of_pass_write_index: int  #: (optional)


class ComputePassDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    timestamp_writes: ComputePassTimestampWrites  #: (optional)


class RenderPassTimestampWrites(TypedDict, total=False):
    query_set: classes.GPUQuerySet  #: (required)
    beginning_of_pass_write_index: int  #: (optional)
    end_of_pass_write_index: int  #: (optional)


class RenderPassDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    color_attachments: list[RenderPassColorAttachment]  #: (required)
    depth_stencil_attachment: RenderPassDepthStencilAttachment  #: (optional)
    occlusion_query_set: classes.GPUQuerySet  #: (optional)
    timestamp_writes: RenderPassTimestampWrites  #: (optional)
    max_draw_count: int  #: (default 50000000)


class RenderPassColorAttachment(TypedDict, total=False):
    view: classes.GPUTexture | classes.GPUTextureView  #: (required)
    depth_slice: int  #: (optional)
    resolve_target: classes.GPUTexture | classes.GPUTextureView  #: (optional)
    clear_value: tuple[float, float, float, float] | Color  #: (optional)
    load_op: enums.LoadOpEnum  #: :obj:`enums.LoadOp <wgpu.enums.LoadOp>` (required)
    store_op: enums.StoreOpEnum  #: :obj:`enums.StoreOp <wgpu.enums.StoreOp>` (required)


class RenderPassDepthStencilAttachment(TypedDict, total=False):
    view: classes.GPUTexture | classes.GPUTextureView  #: (required)
    depth_clear_value: float  #: (optional)
    depth_load_op: (
        enums.LoadOpEnum
    )  #: :obj:`enums.LoadOp <wgpu.enums.LoadOp>` (optional)
    depth_store_op: (
        enums.StoreOpEnum
    )  #: :obj:`enums.StoreOp <wgpu.enums.StoreOp>` (optional)
    depth_read_only: bool  #: (default false)
    stencil_clear_value: int  #: (default 0)
    stencil_load_op: (
        enums.LoadOpEnum
    )  #: :obj:`enums.LoadOp <wgpu.enums.LoadOp>` (optional)
    stencil_store_op: (
        enums.StoreOpEnum
    )  #: :obj:`enums.StoreOp <wgpu.enums.StoreOp>` (optional)
    stencil_read_only: bool  #: (default false)


class RenderPassLayout(TypedDict, total=False):
    label: str  #: (default "")
    color_formats: list[
        enums.TextureFormatEnum
    ]  #: list[:obj:`enums.TextureFormat <wgpu.enums.TextureFormat>`] (required)
    depth_stencil_format: (
        enums.TextureFormatEnum
    )  #: :obj:`enums.TextureFormat <wgpu.enums.TextureFormat>` (optional)
    sample_count: int  #: (default 1)


class RenderBundleDescriptor(TypedDict, total=False):
    label: str  #: (default "")


class RenderBundleEncoderDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    color_formats: list[
        enums.TextureFormatEnum
    ]  #: list[:obj:`enums.TextureFormat <wgpu.enums.TextureFormat>`] (required)
    depth_stencil_format: (
        enums.TextureFormatEnum
    )  #: :obj:`enums.TextureFormat <wgpu.enums.TextureFormat>` (optional)
    sample_count: int  #: (default 1)
    depth_read_only: bool  #: (default false)
    stencil_read_only: bool  #: (default false)


class QueueDescriptor(TypedDict, total=False):
    label: str  #: (default "")


class QuerySetDescriptor(TypedDict, total=False):
    label: str  #: (default "")
    type: (
        enums.QueryTypeEnum
    )  #: :obj:`enums.QueryType <wgpu.enums.QueryType>` (required)
    count: int  #: (required)


class CanvasToneMapping(TypedDict, total=False):
    mode: enums.CanvasToneMappingModeEnum  #: :obj:`enums.CanvasToneMappingMode <wgpu.enums.CanvasToneMappingMode>` (default "standard")


class CanvasConfiguration(TypedDict, total=False):
    device: classes.GPUDevice  #: (required)
    format: (
        enums.TextureFormatEnum
    )  #: :obj:`enums.TextureFormat <wgpu.enums.TextureFormat>` (required)
    usage: (
        flags.TextureUsageFlags
    )  #: :obj:`flags.TextureUsage <wgpu.flags.TextureUsage>` (default 0x10)
    view_formats: list[
        enums.TextureFormatEnum
    ]  #: list[:obj:`enums.TextureFormat <wgpu.enums.TextureFormat>`] (default [])
    color_space: str  #: (default "srgb")
    tone_mapping: CanvasToneMapping  #: (default {})
    alpha_mode: (
        enums.CanvasAlphaModeEnum
    )  #: :obj:`enums.CanvasAlphaMode <wgpu.enums.CanvasAlphaMode>` (default "opaque")


class UncapturedErrorEventInit(TypedDict, total=False):
    error: classes.GPUError  #: (required)


class Color(TypedDict, total=False):
    r: float  #: (required)
    g: float  #: (required)
    b: float  #: (required)
    a: float  #: (required)


class Origin2D(TypedDict, total=False):
    x: int  #: (default 0)
    y: int  #: (default 0)


class Origin3D(TypedDict, total=False):
    x: int  #: (default 0)
    y: int  #: (default 0)
    z: int  #: (default 0)


class Extent3D(TypedDict, total=False):
    width: int  #: (required)
    height: int  #: (default 1)
    depth_or_array_layers: int  #: (default 1)
